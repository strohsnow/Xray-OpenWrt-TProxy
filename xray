#!/bin/sh /etc/rc.common

START=99

EXTRA_COMMANDS="status update"
EXTRA_HELP="        status          Show xray status
        update          Update xray geofiles"

RES_SUBNETS_V4="10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, \
192.0.0.0/24, 198.18.0.0/15, 224.0.0.0/3"
RES_SUBNETS_V6="::1/128, ::ffff:0:0/96, 64:ff9b::/96, 64:ff9b:1::/48, 100::/64, \
2001:20::/28, 5f00::/16, fc00::/7, fe80::/10, ff00::/8"

# fw4 print | grep lan_subnets
LAN_SUBNETS_V4="192.168.1.0/24"
LAN_SUBNETS_V6="fd00::/8"

TABLE_NUM_V4=104
TABLE_NUM_V6=106
TPROXY_MARK=0xff
TPROXY_PORT=12345
NFT_CONFIG="/etc/nftables.d/xray.nft"

XRAY_USER="xray"
XRAY_GROUP="xray"
XRAY_UID=0
XRAY_GID=10000

XRAY_BINARY="/usr/bin/xray"
XRAY_ASSETS="/usr/share/xray"
XRAY_CONFIG="/etc/xray/config.json"
XRAY_PIDFILE="/var/run/xray.pid"

XRAY_GEOIP="$XRAY_ASSETS/geoip.dat"
XRAY_GEOSITE="$XRAY_ASSETS/geosite.dat"
GEOIP_URL="https://raw.githubusercontent.com/runetfreedom/russia-v2ray-rules-dat/release/geoip.dat"
GEOSITE_URL="https://raw.githubusercontent.com/runetfreedom/russia-v2ray-rules-dat/release/geosite.dat"

add_policy_routing() {
    if ! ip rule list | grep -q "fwmark $TPROXY_MARK lookup $TABLE_NUM_V4"; then
        ip rule add fwmark $TPROXY_MARK table $TABLE_NUM_V4
    fi
    if ! ip -6 rule list | grep -q "fwmark $TPROXY_MARK lookup $TABLE_NUM_V6"; then
        ip -6 rule add fwmark $TPROXY_MARK table $TABLE_NUM_V6
    fi

    if ! ip route show table all | grep -q "local default dev lo table $TABLE_NUM_V4"; then
        ip route add local default dev lo table $TABLE_NUM_V4
    fi
    if ! ip -6 route show table all | grep -q "local default dev lo table $TABLE_NUM_V6"; then
        ip -6 route add local default dev lo table $TABLE_NUM_V6
    fi
}

del_policy_routing() {
    if ip rule list | grep -q "fwmark $TPROXY_MARK lookup $TABLE_NUM_V4"; then
        ip rule del fwmark $TPROXY_MARK table $TABLE_NUM_V4
    fi
    if ip -6 rule list | grep -q "fwmark $TPROXY_MARK lookup $TABLE_NUM_V6"; then
        ip -6 rule del fwmark $TPROXY_MARK table $TABLE_NUM_V6
    fi

    if ip route show table all | grep -q "local default dev lo table $TABLE_NUM_V4"; then
        ip route del local default dev lo table $TABLE_NUM_V4
    fi
    if ip -6 route show table all | grep -q "local default dev lo table $TABLE_NUM_V6"; then
        ip -6 route del local default dev lo table $TABLE_NUM_V6
    fi
}

add_xray_user_group() {
    if ! grep -q "^$XRAY_USER:" /etc/passwd; then
        echo "$XRAY_USER:x:$XRAY_UID:$XRAY_GID::/var:/bin/false" >> /etc/passwd
    fi
    if ! grep -q "^$XRAY_GROUP:" /etc/group; then
        echo "$XRAY_GROUP:x:$XRAY_GID:$XRAY_USER" >> /etc/group
    fi
}

del_xray_user_group() {
    if grep -q "^$XRAY_USER:" /etc/passwd; then
        sed -i "/^$XRAY_USER:/d" /etc/passwd
    fi
    if grep -q "^$XRAY_GROUP:" /etc/group; then
        sed -i "/^$XRAY_GROUP:/d" /etc/group
    fi
}

add_nft_config() {
    cat >$NFT_CONFIG <<EOF
define lan_subnets_v4 = { $LAN_SUBNETS_V4 }
define lan_subnets_v6 = { $LAN_SUBNETS_V6 }
define res_subnets_v4 = { $RES_SUBNETS_V4 }
define res_subnets_v6 = { $RES_SUBNETS_V6 }

chain xray_prerouting {
    type filter hook prerouting priority mangle; policy accept;

    meta l4proto { tcp, udp } meta mark $TPROXY_MARK tproxy ip to 127.0.0.1:$TPROXY_PORT
    meta l4proto { tcp, udp } meta mark $TPROXY_MARK tproxy ip6 to [::1]:$TPROXY_PORT

    ip saddr != \$lan_subnets_v4 return
    ip6 saddr != \$lan_subnets_v6 return

    ip daddr \$res_subnets_v4 return
    ip6 daddr \$res_subnets_v6 return

    ip daddr \$lan_subnets_v4 tcp dport != 53 return
    ip6 daddr \$lan_subnets_v6 tcp dport != 53 return

    ip daddr \$lan_subnets_v4 udp dport != 53 return
    ip6 daddr \$lan_subnets_v6 udp dport != 53 return

    meta l4proto { tcp, udp } tproxy ip to 127.0.0.1:$TPROXY_PORT meta mark set $TPROXY_MARK
    meta l4proto { tcp, udp } tproxy ip6 to [::1]:$TPROXY_PORT meta mark set $TPROXY_MARK
}

chain xray_output {
    type route hook output priority mangle; policy accept;

    meta skgid $XRAY_GID return
    ip daddr \$res_subnets_v4 return
    ip6 daddr \$res_subnets_v6 return

    ip daddr \$lan_subnets_v4 tcp dport != 53 return
    ip6 daddr \$lan_subnets_v6 tcp dport != 53 return

    ip daddr \$lan_subnets_v4 udp dport != 53 return
    ip6 daddr \$lan_subnets_v6 udp dport != 53 return

    meta l4proto { tcp, udp } meta mark set $TPROXY_MARK
}

chain xray_divert {
    type filter hook prerouting priority mangle - 10; policy accept;

    socket transparent 1 meta skgid $XRAY_GID meta mark set $TPROXY_MARK
}
EOF
    fw4 reload
}

del_nft_config() {
    rm -f $NFT_CONFIG 
    fw4 reload
}

start_xray() {
    add_policy_routing
    add_xray_user_group
    add_nft_config

    ulimit -SHn 1000000
    XRAY_LOCATION_ASSET=$XRAY_ASSETS \
    start-stop-daemon -S -b -q -m -p $XRAY_PIDFILE \
        -c $XRAY_USER:$XRAY_GROUP \
        -x $XRAY_BINARY -- -c $XRAY_CONFIG
}

stop_xray() {
    start-stop-daemon -K -p $XRAY_PIDFILE -s TERM -q
    rm -f $XRAY_PIDFILE

    del_policy_routing
    del_xray_user_group
    del_nft_config
}

xray_running() {
    start-stop-daemon -K -t -p $XRAY_PIDFILE -q
}

download_geofiles() {
    mkdir -p $XRAY_ASSETS
    curl -fSL $GEOIP_URL -o $XRAY_GEOIP
    curl -fSL $GEOSITE_URL -o $XRAY_GEOSITE
}

start() {
    if xray_running; then
        echo "xray is already running"
        return 0
    fi
    start_xray
}

stop() {
    stop_xray
}

restart() {
    stop_xray
    start_xray
}

status() {
    if xray_running; then
        echo "xray is running"
    else
        echo "xray is stopped"
    fi
}

update() {
    download_geofiles
}
